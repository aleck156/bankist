'use strict';

///////////////////////////////////////
// Modal window

const modal = document.querySelector('.modal');
const overlay = document.querySelector('.overlay');
const btnCloseModal = document.querySelector('.btn--close-modal');
const btnsOpenModal = document.querySelectorAll('.btn--show-modal');

const openModal = function (e) {
  e.preventDefault();
  modal.classList.remove('hidden');
  overlay.classList.remove('hidden');
};

const closeModal = function () {
  modal.classList.add('hidden');
  overlay.classList.add('hidden');
};

btnsOpenModal.forEach(btn => btn.addEventListener('click', openModal));

btnCloseModal.addEventListener('click', closeModal);
overlay.addEventListener('click', closeModal);

document.addEventListener('keydown', function (e) {
  if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
    closeModal();
  }
});

///////////////////////////////////////
///////////////////////////////////////

const btnScrollTo = document.querySelector('.btn--scroll-to');

const section1 = document.querySelector('#section--1');

btnScrollTo.addEventListener('click', function (e) {
  section1.scrollIntoView({ behavior: 'smooth' });
});

///////////////////////////////////////
// 189. Types of Events and Event Handlers

// event - a signal generated by a certain DOM object
// https://developer.mozilla.org/en-US/docs/Web/Events

// .addEventListener is better
// allows to attach multiple listeners to the same element, even on the same event

const h1 = document.querySelector('h1');

const alertH1 = function (e) {
  console.log(`addEventListener: Great! You ar reading teh heading!`);
};

h1.addEventListener('mouseenter', alertH1);

h1.onmouseenter = function (e) {
  const now = new Date();
  const locale = navigator.locale;
  const options = {
    locale,
    day: 'numeric',
    month: 'numeric',
    year: 'numeric',
    hours: '2-digit',
    minutes: '2-digit',
  };

  console.log(`onmouseenter: Great! You ar reading teh heading!}`);
};

// removing event listeners
// extract the callback function into a named function
// then just remove it!

setTimeout(() => {
  h1.removeEventListener('mouseenter', alertH1);
}, 3000);
